// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: protoc/hashCalc.proto

package hashcalc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HashCalc_CalcSHA3_FullMethodName = "/HashCalcService.HashCalc/CalcSHA3"
)

// HashCalcClient is the client API for HashCalc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashCalcClient interface {
	CalcSHA3(ctx context.Context, in *TextList, opts ...grpc.CallOption) (*TextList, error)
}

type hashCalcClient struct {
	cc grpc.ClientConnInterface
}

func NewHashCalcClient(cc grpc.ClientConnInterface) HashCalcClient {
	return &hashCalcClient{cc}
}

func (c *hashCalcClient) CalcSHA3(ctx context.Context, in *TextList, opts ...grpc.CallOption) (*TextList, error) {
	out := new(TextList)
	err := c.cc.Invoke(ctx, HashCalc_CalcSHA3_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashCalcServer is the server API for HashCalc service.
// All implementations must embed UnimplementedHashCalcServer
// for forward compatibility
type HashCalcServer interface {
	CalcSHA3(context.Context, *TextList) (*TextList, error)
	mustEmbedUnimplementedHashCalcServer()
}

// UnimplementedHashCalcServer must be embedded to have forward compatible implementations.
type UnimplementedHashCalcServer struct {
}

func (UnimplementedHashCalcServer) CalcSHA3(context.Context, *TextList) (*TextList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcSHA3 not implemented")
}
func (UnimplementedHashCalcServer) mustEmbedUnimplementedHashCalcServer() {}

// UnsafeHashCalcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashCalcServer will
// result in compilation errors.
type UnsafeHashCalcServer interface {
	mustEmbedUnimplementedHashCalcServer()
}

func RegisterHashCalcServer(s grpc.ServiceRegistrar, srv HashCalcServer) {
	s.RegisterService(&HashCalc_ServiceDesc, srv)
}

func _HashCalc_CalcSHA3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashCalcServer).CalcSHA3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashCalc_CalcSHA3_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashCalcServer).CalcSHA3(ctx, req.(*TextList))
	}
	return interceptor(ctx, in, info, handler)
}

// HashCalc_ServiceDesc is the grpc.ServiceDesc for HashCalc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashCalc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HashCalcService.HashCalc",
	HandlerType: (*HashCalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalcSHA3",
			Handler:    _HashCalc_CalcSHA3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/hashCalc.proto",
}
